class Square{
    side;

    constructor(side) {
        this.side = side;
    }
    getArea(){
        return this.side*this.side;
    }
}

class ManySquaresI {
    squares;

    constructor(...squares) {
        this.squares = squares;
    }

    [Symbol.iterator] () {
        let index = 0;
        const currSquares = this.squares;

        return {
            next() {
                if (index < currSquares.length) return {value: currSquares[index++], done: false};
                else return {value: undefined, done:true};
            }
        }
    }
}

class ManySquaresG {
    squares;

    constructor(...squares) {
        this.squares = squares;
    }

    *[Symbol.iterator] () {
        for (let square of this.squares) {
            yield square;
        }
    }
}

const square1 = new Square(7.5);
const square2 = new Square(5.5);
const square3 = new Square(6.5);
const pack = new ManySquaresI(square1, square2, square3);
for (const square of pack) {
    console.log(square.getArea());
}
console.log("------------");
const packWithGenerator = new ManySquaresG(square1, square2,square3);
for (const square of packWithGenerator) {
    console.log(square.getArea());
}

